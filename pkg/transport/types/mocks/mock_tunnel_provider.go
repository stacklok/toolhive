// Code generated by MockGen. DO NOT EDIT.
// Source: tunnel.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_tunnel_provider.go -package=mocks -source=tunnel.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTunnelProvider is a mock of TunnelProvider interface.
type MockTunnelProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTunnelProviderMockRecorder
	isgomock struct{}
}

// MockTunnelProviderMockRecorder is the mock recorder for MockTunnelProvider.
type MockTunnelProviderMockRecorder struct {
	mock *MockTunnelProvider
}

// NewMockTunnelProvider creates a new mock instance.
func NewMockTunnelProvider(ctrl *gomock.Controller) *MockTunnelProvider {
	mock := &MockTunnelProvider{ctrl: ctrl}
	mock.recorder = &MockTunnelProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTunnelProvider) EXPECT() *MockTunnelProviderMockRecorder {
	return m.recorder
}

// ParseConfig mocks base method.
func (m *MockTunnelProvider) ParseConfig(config map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseConfig", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// ParseConfig indicates an expected call of ParseConfig.
func (mr *MockTunnelProviderMockRecorder) ParseConfig(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseConfig", reflect.TypeOf((*MockTunnelProvider)(nil).ParseConfig), config)
}

// StartTunnel mocks base method.
func (m *MockTunnelProvider) StartTunnel(ctx context.Context, name, targetURI string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTunnel", ctx, name, targetURI)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartTunnel indicates an expected call of StartTunnel.
func (mr *MockTunnelProviderMockRecorder) StartTunnel(ctx, name, targetURI any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTunnel", reflect.TypeOf((*MockTunnelProvider)(nil).StartTunnel), ctx, name, targetURI)
}
