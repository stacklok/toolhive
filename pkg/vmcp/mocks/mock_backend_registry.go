// Code generated by MockGen. DO NOT EDIT.
// Source: registry.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_backend_registry.go -package=mocks -source=registry.go BackendRegistry
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	vmcp "github.com/stacklok/toolhive/pkg/vmcp"
	gomock "go.uber.org/mock/gomock"
)

// MockBackendRegistry is a mock of BackendRegistry interface.
type MockBackendRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockBackendRegistryMockRecorder
	isgomock struct{}
}

// MockBackendRegistryMockRecorder is the mock recorder for MockBackendRegistry.
type MockBackendRegistryMockRecorder struct {
	mock *MockBackendRegistry
}

// NewMockBackendRegistry creates a new mock instance.
func NewMockBackendRegistry(ctrl *gomock.Controller) *MockBackendRegistry {
	mock := &MockBackendRegistry{ctrl: ctrl}
	mock.recorder = &MockBackendRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackendRegistry) EXPECT() *MockBackendRegistryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockBackendRegistry) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockBackendRegistryMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockBackendRegistry)(nil).Count))
}

// Get mocks base method.
func (m *MockBackendRegistry) Get(ctx context.Context, backendID string) *vmcp.Backend {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, backendID)
	ret0, _ := ret[0].(*vmcp.Backend)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockBackendRegistryMockRecorder) Get(ctx, backendID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBackendRegistry)(nil).Get), ctx, backendID)
}

// List mocks base method.
func (m *MockBackendRegistry) List(ctx context.Context) []vmcp.Backend {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]vmcp.Backend)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockBackendRegistryMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBackendRegistry)(nil).List), ctx)
}
