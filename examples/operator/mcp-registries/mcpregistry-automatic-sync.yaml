apiVersion: v1
kind: ConfigMap
metadata:
  name: auto-sync-registry-data
  namespace: toolhive-system
data:
  registry.json: |
    {
      "$schema": "https://raw.githubusercontent.com/stacklok/toolhive/main/pkg/registry/data/schema.json",
      "version": "1.0.0",
      "last_updated": "2025-09-08T12:00:00Z",
      "servers": {
        "postgres-mcp-pro": {
          "description": "Provides configurable read/write access and performance analysis for PostgreSQL databases.",
          "tier": "Official",
          "status": "Active",
          "transport": "sse",
          "tools": [
            "list_schemas",
            "execute_sql",
            "explain_query"
          ],
          "metadata": {
            "stars": 1043,
            "pulls": 22175,
            "last_updated": "2025-09-01T02:37:23Z"
          },
          "repository_url": "https://github.com/crystaldba/postgres-mcp",
          "tags": [
            "database",
            "postgresql",
            "sql",
            "analytics",
            "production"
          ],
          "image": "crystaldba/postgres-mcp:0.3.0",
          "target_port": 8000,
          "permissions": {
            "network": {
              "outbound": {
                "insecure_allow_all": true
              }
            }
          },
          "env_vars": [
            {
              "name": "DATABASE_URI",
              "description": "PostgreSQL connection string, like 'postgresql://username:password@host.docker.internal:5432/dbname'",
              "required": true,
              "secret": true
            }
          ],
          "args": [
            "--transport=sse",
            "--sse-host=0.0.0.0",
            "--sse-port=8000"
          ]
        },
        "mysql-connector": {
          "description": "MySQL database connector with advanced query capabilities",
          "tier": "Official",
          "status": "Active",
          "transport": "stdio",
          "tools": [
            "execute_query",
            "show_tables",
            "describe_table",
            "backup_database"
          ],
          "metadata": {
            "stars": 890,
            "pulls": 15200,
            "last_updated": "2025-09-05T08:15:00Z"
          },
          "repository_url": "https://github.com/mysql/mysql-mcp-server",
          "tags": [
            "database",
            "mysql",
            "sql",
            "production"
          ],
          "image": "mysql/mcp-server:2.1.0",
          "permissions": {
            "network": {
              "outbound": {
                "insecure_allow_all": true
              }
            }
          },
          "env_vars": [
            {
              "name": "MYSQL_CONNECTION_STRING",
              "description": "MySQL connection string",
              "required": true,
              "secret": true
            }
          ]
        },
        "redis-cache": {
          "description": "Redis caching and key-value operations",
          "tier": "Community",
          "status": "Active",
          "transport": "stdio",
          "tools": [
            "get_key",
            "set_key",
            "delete_key",
            "list_keys"
          ],
          "metadata": {
            "stars": 650,
            "pulls": 8900,
            "last_updated": "2025-09-03T14:22:00Z"
          },
          "repository_url": "https://github.com/redis/redis-mcp-server",
          "tags": [
            "database",
            "redis",
            "cache",
            "production"
          ],
          "image": "redis/mcp-server:1.5.0",
          "permissions": {
            "network": {
              "outbound": {
                "insecure_allow_all": true
              }
            }
          }
        },
        "fetch-web": {
          "description": "Allows you to fetch content from the web",
          "tier": "Community",
          "status": "Active",
          "transport": "streamable-http",
          "tools": [
            "fetch"
          ],
          "metadata": {
            "stars": 17,
            "pulls": 12390,
            "last_updated": "2025-09-05T02:29:06Z"
          },
          "repository_url": "https://github.com/stackloklabs/gofetch",
          "tags": [
            "web",
            "scraping",
            "fetch",
            "http",
            "development"
          ],
          "image": "ghcr.io/stackloklabs/gofetch/server:0.0.6",
          "permissions": {
            "network": {
              "outbound": {
                "insecure_allow_all": true,
                "allow_port": [
                  443
                ]
              }
            }
          }
        },
        "analytics-beta": {
          "description": "Beta analytics and reporting server with experimental features",
          "tier": "Community",
          "status": "Active",
          "transport": "stdio",
          "tools": [
            "generate_report",
            "analyze_data",
            "export_metrics"
          ],
          "metadata": {
            "stars": 85,
            "pulls": 200,
            "last_updated": "2025-09-01T09:30:00Z"
          },
          "repository_url": "https://github.com/analytics/beta-mcp-server",
          "tags": [
            "analytics",
            "reporting",
            "beta",
            "experimental"
          ],
          "image": "analytics/beta-server:0.8.0-beta",
          "permissions": {
            "network": {
              "outbound": {}
            }
          }
        },
        "old-api-gateway": {
          "description": "Legacy API gateway - use new microservices architecture instead",
          "tier": "Community",
          "status": "Active",
          "transport": "stdio",
          "tools": [
            "route_request",
            "manage_endpoints"
          ],
          "metadata": {
            "stars": 45,
            "pulls": 150,
            "last_updated": "2024-12-01T10:00:00Z"
          },
          "repository_url": "https://github.com/legacy/api-gateway-mcp",
          "tags": [
            "api",
            "gateway",
            "legacy",
            "deprecated"
          ],
          "image": "legacy/api-gateway:v1.2",
          "permissions": {
            "network": {
              "outbound": {
                "insecure_allow_all": true
              }
            }
          }
        }
      }
    }
---
apiVersion: toolhive.stacklok.dev/v1alpha1
kind: MCPRegistry
metadata:
  name: auto-sync-registry
  namespace: toolhive-system
spec:
  displayName: "Auto-Sync MCP Server Registry"
  source:
    type: configmap
    format: toolhive
    configmap:
      name: auto-sync-registry-data
      key: registry.json
  syncPolicy:
    interval: "30m"  # Automatically sync every 30 minutes
  filter:
    tags:
      include:
        - "database"    # Only database servers
        - "production"  # Only production-ready servers
      exclude:
        - "experimental"  # Exclude experimental servers
        - "deprecated"    # Exclude deprecated servers
        - "beta"          # Exclude beta versions