// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_manager.go -package=mocks -source=manager.go Manager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	client "github.com/stacklok/toolhive/pkg/client"
	core "github.com/stacklok/toolhive/pkg/core"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// AddServerToClients mocks base method.
func (m *MockManager) AddServerToClients(ctx context.Context, serverName, serverURL, transportType, group string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddServerToClients", ctx, serverName, serverURL, transportType, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddServerToClients indicates an expected call of AddServerToClients.
func (mr *MockManagerMockRecorder) AddServerToClients(ctx, serverName, serverURL, transportType, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddServerToClients", reflect.TypeOf((*MockManager)(nil).AddServerToClients), ctx, serverName, serverURL, transportType, group)
}

// ListClients mocks base method.
func (m *MockManager) ListClients() ([]client.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClients")
	ret0, _ := ret[0].([]client.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClients indicates an expected call of ListClients.
func (mr *MockManagerMockRecorder) ListClients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClients", reflect.TypeOf((*MockManager)(nil).ListClients))
}

// RegisterClients mocks base method.
func (m *MockManager) RegisterClients(clients []client.Client, workloads []core.Workload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterClients", clients, workloads)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterClients indicates an expected call of RegisterClients.
func (mr *MockManagerMockRecorder) RegisterClients(clients, workloads any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterClients", reflect.TypeOf((*MockManager)(nil).RegisterClients), clients, workloads)
}

// RemoveServerFromClients mocks base method.
func (m *MockManager) RemoveServerFromClients(ctx context.Context, serverName, group string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveServerFromClients", ctx, serverName, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveServerFromClients indicates an expected call of RemoveServerFromClients.
func (mr *MockManagerMockRecorder) RemoveServerFromClients(ctx, serverName, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveServerFromClients", reflect.TypeOf((*MockManager)(nil).RemoveServerFromClients), ctx, serverName, group)
}

// UnregisterClients mocks base method.
func (m *MockManager) UnregisterClients(ctx context.Context, clients []client.Client, workloads []core.Workload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterClients", ctx, clients, workloads)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterClients indicates an expected call of UnregisterClients.
func (mr *MockManagerMockRecorder) UnregisterClients(ctx, clients, workloads any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterClients", reflect.TypeOf((*MockManager)(nil).UnregisterClients), ctx, clients, workloads)
}
