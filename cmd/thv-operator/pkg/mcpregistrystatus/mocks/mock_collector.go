// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_collector.go -package=mocks -source=types.go SyncStatusCollector,APIStatusCollector,StatusDeriver,StatusManager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/stacklok/toolhive/cmd/thv-operator/api/v1alpha1"
	mcpregistrystatus "github.com/stacklok/toolhive/cmd/thv-operator/pkg/mcpregistrystatus"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockSyncStatusCollector is a mock of SyncStatusCollector interface.
type MockSyncStatusCollector struct {
	ctrl     *gomock.Controller
	recorder *MockSyncStatusCollectorMockRecorder
	isgomock struct{}
}

// MockSyncStatusCollectorMockRecorder is the mock recorder for MockSyncStatusCollector.
type MockSyncStatusCollectorMockRecorder struct {
	mock *MockSyncStatusCollector
}

// NewMockSyncStatusCollector creates a new mock instance.
func NewMockSyncStatusCollector(ctrl *gomock.Controller) *MockSyncStatusCollector {
	mock := &MockSyncStatusCollector{ctrl: ctrl}
	mock.recorder = &MockSyncStatusCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncStatusCollector) EXPECT() *MockSyncStatusCollectorMockRecorder {
	return m.recorder
}

// SetSyncCondition mocks base method.
func (m *MockSyncStatusCollector) SetSyncCondition(condition v1.Condition) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSyncCondition", condition)
}

// SetSyncCondition indicates an expected call of SetSyncCondition.
func (mr *MockSyncStatusCollectorMockRecorder) SetSyncCondition(condition any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSyncCondition", reflect.TypeOf((*MockSyncStatusCollector)(nil).SetSyncCondition), condition)
}

// SetSyncStatus mocks base method.
func (m *MockSyncStatusCollector) SetSyncStatus(phase v1alpha1.SyncPhase, message string, attemptCount int, lastSyncTime *v1.Time, lastSyncHash string, serverCount int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSyncStatus", phase, message, attemptCount, lastSyncTime, lastSyncHash, serverCount)
}

// SetSyncStatus indicates an expected call of SetSyncStatus.
func (mr *MockSyncStatusCollectorMockRecorder) SetSyncStatus(phase, message, attemptCount, lastSyncTime, lastSyncHash, serverCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSyncStatus", reflect.TypeOf((*MockSyncStatusCollector)(nil).SetSyncStatus), phase, message, attemptCount, lastSyncTime, lastSyncHash, serverCount)
}

// MockAPIStatusCollector is a mock of APIStatusCollector interface.
type MockAPIStatusCollector struct {
	ctrl     *gomock.Controller
	recorder *MockAPIStatusCollectorMockRecorder
	isgomock struct{}
}

// MockAPIStatusCollectorMockRecorder is the mock recorder for MockAPIStatusCollector.
type MockAPIStatusCollectorMockRecorder struct {
	mock *MockAPIStatusCollector
}

// NewMockAPIStatusCollector creates a new mock instance.
func NewMockAPIStatusCollector(ctrl *gomock.Controller) *MockAPIStatusCollector {
	mock := &MockAPIStatusCollector{ctrl: ctrl}
	mock.recorder = &MockAPIStatusCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIStatusCollector) EXPECT() *MockAPIStatusCollectorMockRecorder {
	return m.recorder
}

// SetAPIReadyCondition mocks base method.
func (m *MockAPIStatusCollector) SetAPIReadyCondition(reason, message string, status v1.ConditionStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAPIReadyCondition", reason, message, status)
}

// SetAPIReadyCondition indicates an expected call of SetAPIReadyCondition.
func (mr *MockAPIStatusCollectorMockRecorder) SetAPIReadyCondition(reason, message, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAPIReadyCondition", reflect.TypeOf((*MockAPIStatusCollector)(nil).SetAPIReadyCondition), reason, message, status)
}

// SetAPIStatus mocks base method.
func (m *MockAPIStatusCollector) SetAPIStatus(phase v1alpha1.APIPhase, message, endpoint string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAPIStatus", phase, message, endpoint)
}

// SetAPIStatus indicates an expected call of SetAPIStatus.
func (mr *MockAPIStatusCollectorMockRecorder) SetAPIStatus(phase, message, endpoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAPIStatus", reflect.TypeOf((*MockAPIStatusCollector)(nil).SetAPIStatus), phase, message, endpoint)
}

// MockStatusDeriver is a mock of StatusDeriver interface.
type MockStatusDeriver struct {
	ctrl     *gomock.Controller
	recorder *MockStatusDeriverMockRecorder
	isgomock struct{}
}

// MockStatusDeriverMockRecorder is the mock recorder for MockStatusDeriver.
type MockStatusDeriverMockRecorder struct {
	mock *MockStatusDeriver
}

// NewMockStatusDeriver creates a new mock instance.
func NewMockStatusDeriver(ctrl *gomock.Controller) *MockStatusDeriver {
	mock := &MockStatusDeriver{ctrl: ctrl}
	mock.recorder = &MockStatusDeriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusDeriver) EXPECT() *MockStatusDeriverMockRecorder {
	return m.recorder
}

// DeriveOverallStatus mocks base method.
func (m *MockStatusDeriver) DeriveOverallStatus(syncStatus *v1alpha1.SyncStatus, apiStatus *v1alpha1.APIStatus) (v1alpha1.MCPRegistryPhase, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeriveOverallStatus", syncStatus, apiStatus)
	ret0, _ := ret[0].(v1alpha1.MCPRegistryPhase)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// DeriveOverallStatus indicates an expected call of DeriveOverallStatus.
func (mr *MockStatusDeriverMockRecorder) DeriveOverallStatus(syncStatus, apiStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeriveOverallStatus", reflect.TypeOf((*MockStatusDeriver)(nil).DeriveOverallStatus), syncStatus, apiStatus)
}

// MockStatusManager is a mock of StatusManager interface.
type MockStatusManager struct {
	ctrl     *gomock.Controller
	recorder *MockStatusManagerMockRecorder
	isgomock struct{}
}

// MockStatusManagerMockRecorder is the mock recorder for MockStatusManager.
type MockStatusManagerMockRecorder struct {
	mock *MockStatusManager
}

// NewMockStatusManager creates a new mock instance.
func NewMockStatusManager(ctrl *gomock.Controller) *MockStatusManager {
	mock := &MockStatusManager{ctrl: ctrl}
	mock.recorder = &MockStatusManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusManager) EXPECT() *MockStatusManagerMockRecorder {
	return m.recorder
}

// API mocks base method.
func (m *MockStatusManager) API() mcpregistrystatus.APIStatusCollector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "API")
	ret0, _ := ret[0].(mcpregistrystatus.APIStatusCollector)
	return ret0
}

// API indicates an expected call of API.
func (mr *MockStatusManagerMockRecorder) API() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "API", reflect.TypeOf((*MockStatusManager)(nil).API))
}

// Apply mocks base method.
func (m *MockStatusManager) Apply(ctx context.Context, k8sClient client.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx, k8sClient)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockStatusManagerMockRecorder) Apply(ctx, k8sClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockStatusManager)(nil).Apply), ctx, k8sClient)
}

// SetCondition mocks base method.
func (m *MockStatusManager) SetCondition(conditionType, reason, message string, status v1.ConditionStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCondition", conditionType, reason, message, status)
}

// SetCondition indicates an expected call of SetCondition.
func (mr *MockStatusManagerMockRecorder) SetCondition(conditionType, reason, message, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCondition", reflect.TypeOf((*MockStatusManager)(nil).SetCondition), conditionType, reason, message, status)
}

// SetOverallStatus mocks base method.
func (m *MockStatusManager) SetOverallStatus(phase v1alpha1.MCPRegistryPhase, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOverallStatus", phase, message)
}

// SetOverallStatus indicates an expected call of SetOverallStatus.
func (mr *MockStatusManagerMockRecorder) SetOverallStatus(phase, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOverallStatus", reflect.TypeOf((*MockStatusManager)(nil).SetOverallStatus), phase, message)
}

// Sync mocks base method.
func (m *MockStatusManager) Sync() mcpregistrystatus.SyncStatusCollector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync")
	ret0, _ := ret[0].(mcpregistrystatus.SyncStatusCollector)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockStatusManagerMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockStatusManager)(nil).Sync))
}
