// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_provider.go -package=mocks -source=interface.go Provider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	config "github.com/stacklok/toolhive/pkg/config"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockProvider) GetConfig() *config.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(*config.Config)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockProviderMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockProvider)(nil).GetConfig))
}

// GetRegistryConfig mocks base method.
func (m *MockProvider) GetRegistryConfig() (string, string, bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistryConfig")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(string)
	return ret0, ret1, ret2, ret3
}

// GetRegistryConfig indicates an expected call of GetRegistryConfig.
func (mr *MockProviderMockRecorder) GetRegistryConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistryConfig", reflect.TypeOf((*MockProvider)(nil).GetRegistryConfig))
}

// LoadOrCreateConfig mocks base method.
func (m *MockProvider) LoadOrCreateConfig() (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOrCreateConfig")
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadOrCreateConfig indicates an expected call of LoadOrCreateConfig.
func (mr *MockProviderMockRecorder) LoadOrCreateConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOrCreateConfig", reflect.TypeOf((*MockProvider)(nil).LoadOrCreateConfig))
}

// SetRegistryFile mocks base method.
func (m *MockProvider) SetRegistryFile(registryPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRegistryFile", registryPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRegistryFile indicates an expected call of SetRegistryFile.
func (mr *MockProviderMockRecorder) SetRegistryFile(registryPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRegistryFile", reflect.TypeOf((*MockProvider)(nil).SetRegistryFile), registryPath)
}

// SetRegistryURL mocks base method.
func (m *MockProvider) SetRegistryURL(registryURL string, allowPrivateRegistryIp bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRegistryURL", registryURL, allowPrivateRegistryIp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRegistryURL indicates an expected call of SetRegistryURL.
func (mr *MockProviderMockRecorder) SetRegistryURL(registryURL, allowPrivateRegistryIp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRegistryURL", reflect.TypeOf((*MockProvider)(nil).SetRegistryURL), registryURL, allowPrivateRegistryIp)
}

// UnsetRegistry mocks base method.
func (m *MockProvider) UnsetRegistry() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsetRegistry")
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsetRegistry indicates an expected call of UnsetRegistry.
func (mr *MockProviderMockRecorder) UnsetRegistry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsetRegistry", reflect.TypeOf((*MockProvider)(nil).UnsetRegistry))
}

// UpdateConfig mocks base method.
func (m *MockProvider) UpdateConfig(updateFn func(*config.Config)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfig", updateFn)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConfig indicates an expected call of UpdateConfig.
func (mr *MockProviderMockRecorder) UpdateConfig(updateFn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfig", reflect.TypeOf((*MockProvider)(nil).UpdateConfig), updateFn)
}
