// Code generated by MockGen. DO NOT EDIT.
// Source: provider_factory.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_provider_factory.go -package=mocks -source=provider_factory.go RegistryProviderFactory
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	service "github.com/stacklok/toolhive/cmd/thv-registry-api/internal/service"
	gomock "go.uber.org/mock/gomock"
)

// MockRegistryProviderFactory is a mock of RegistryProviderFactory interface.
type MockRegistryProviderFactory struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryProviderFactoryMockRecorder
	isgomock struct{}
}

// MockRegistryProviderFactoryMockRecorder is the mock recorder for MockRegistryProviderFactory.
type MockRegistryProviderFactoryMockRecorder struct {
	mock *MockRegistryProviderFactory
}

// NewMockRegistryProviderFactory creates a new mock instance.
func NewMockRegistryProviderFactory(ctrl *gomock.Controller) *MockRegistryProviderFactory {
	mock := &MockRegistryProviderFactory{ctrl: ctrl}
	mock.recorder = &MockRegistryProviderFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistryProviderFactory) EXPECT() *MockRegistryProviderFactoryMockRecorder {
	return m.recorder
}

// CreateProvider mocks base method.
func (m *MockRegistryProviderFactory) CreateProvider(config *service.RegistryProviderConfig) (service.RegistryDataProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProvider", config)
	ret0, _ := ret[0].(service.RegistryDataProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProvider indicates an expected call of CreateProvider.
func (mr *MockRegistryProviderFactoryMockRecorder) CreateProvider(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProvider", reflect.TypeOf((*MockRegistryProviderFactory)(nil).CreateProvider), config)
}
