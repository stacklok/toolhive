// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stacklok/toolhive/pkg/vmcp/auth (interfaces: TokenAuthenticator)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_token_authenticator.go -package=mocks github.com/stacklok/toolhive/pkg/vmcp/auth TokenAuthenticator
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	jwt "github.com/golang-jwt/jwt/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockTokenAuthenticator is a mock of TokenAuthenticator interface.
type MockTokenAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockTokenAuthenticatorMockRecorder
	isgomock struct{}
}

// MockTokenAuthenticatorMockRecorder is the mock recorder for MockTokenAuthenticator.
type MockTokenAuthenticatorMockRecorder struct {
	mock *MockTokenAuthenticator
}

// NewMockTokenAuthenticator creates a new mock instance.
func NewMockTokenAuthenticator(ctrl *gomock.Controller) *MockTokenAuthenticator {
	mock := &MockTokenAuthenticator{ctrl: ctrl}
	mock.recorder = &MockTokenAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenAuthenticator) EXPECT() *MockTokenAuthenticatorMockRecorder {
	return m.recorder
}

// Middleware mocks base method.
func (m *MockTokenAuthenticator) Middleware(next http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Middleware", next)
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// Middleware indicates an expected call of Middleware.
func (mr *MockTokenAuthenticatorMockRecorder) Middleware(next any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Middleware", reflect.TypeOf((*MockTokenAuthenticator)(nil).Middleware), next)
}

// ValidateToken mocks base method.
func (m *MockTokenAuthenticator) ValidateToken(ctx context.Context, tokenString string) (jwt.MapClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, tokenString)
	ret0, _ := ret[0].(jwt.MapClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockTokenAuthenticatorMockRecorder) ValidateToken(ctx, tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockTokenAuthenticator)(nil).ValidateToken), ctx, tokenString)
}
