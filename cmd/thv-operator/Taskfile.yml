version: '3'

vars:
  CRD_DIR: config/crd/bases
  DOCS_OUT: ../../docs/operator/crd-api.md
  CRDREF_CONFIG: ../../docs/operator/crd-ref-config.yaml

tasks:
  kind-setup:
    desc: Setup a local Kind cluster
    cmds:
      - kind create cluster --name toolhive
      - kind get kubeconfig --name toolhive > kconfig.yaml

  kind-destroy:
    desc: Destroy a local Kind cluster
    cmds:
      - kind delete cluster --name toolhive
      - rm kconfig.yaml

  kind-ingress-setup:
    desc: Setup Nginx Ingress Controller in a local Kind cluster
    cmds:
      - echo "Applying Kubernetes Ingress manifest..."
      - kubectl apply -f https://kind.sigs.k8s.io/examples/ingress/deploy-ingress-nginx.yaml --kubeconfig kconfig.yaml
      - echo "Waiting for Ingress Nginx Controller to be created and ready..."
      - cmd: |
          while ! kubectl wait --namespace=ingress-nginx --for=condition=Ready pod --selector=app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/component=controller --timeout=120s --kubeconfig kconfig.yaml &>/dev/null; do sleep 2; done
        ignore_error: true
      # We do the below commands because of some inconsistency between the secret and webhook caBundle. ref: https://github.com/kubernetes/ingress-nginx/issues/5968#issuecomment-849772666
      - echo "Patching Ingress Nginx Admission Webhook CA Bundle..."
      - |
        CA=$(kubectl -n ingress-nginx get secret ingress-nginx-admission -ojsonpath='{.data.ca}' --kubeconfig kconfig.yaml)
        kubectl patch validatingwebhookconfigurations ingress-nginx-admission --type='json' --patch='[{"op":"add","path":"/webhooks/0/clientConfig/caBundle","value":"'$CA'"}]' --kubeconfig kconfig.yaml

  kind-with-toolhive-operator*:
    desc: |
      Setup a local Kind cluster with the ToolHive Operator installed. You can choose to deploy a locally built Operator image or the latest Operator image from Github.
      To deploy a locally built Operator image, run `task kind-with-toolhive-operator-local`.
      To deploy the latest Operator image from Github, run `task kind-with-toolhive-operator-latest`.
      By default, you can run `task kind-with-toolhive-operator` to deploy the latest Operator image from Github.
    vars:
      OPERATOR_DEPLOYMENT: '{{index .MATCH 0 | trimPrefix "-" | default "latest"}}'
    cmds:
      - task: kind-setup
      - task: kind-ingress-setup
      - task: operator-install-crds
      - task: operator-deploy-{{.OPERATOR_DEPLOYMENT}}

  # Operator tasks
  build-operator:
    desc: Build the operator binary
    vars:
      VERSION:
        sh: git describe --tags --always --dirty || echo "dev"
      COMMIT:
        sh: git rev-parse --short HEAD || echo "unknown"
      BUILD_DATE:
        sh: date -u +"%Y-%m-%dT%H:%M:%SZ"
    cmds:
      - mkdir -p bin
      - go build -ldflags "-s -w -X github.com/stacklok/toolhive/pkg/versions.Version={{.VERSION}} -X github.com/stacklok/toolhive/pkg/versions.Commit={{.COMMIT}} -X github.com/stacklok/toolhive/pkg/versions.BuildDate={{.BUILD_DATE}}" -o bin/thv-operator ./cmd/thv-operator

  install-operator:
    desc: Install the thv-operator binary to GOPATH/bin
    vars:
      VERSION:
        sh: git describe --tags --always --dirty || echo "dev"
      COMMIT:
        sh: git rev-parse --short HEAD || echo "unknown"
      BUILD_DATE:
        sh: date -u +"%Y-%m-%dT%H:%M:%SZ"
    cmds:
      - go install -ldflags "-s -w -X github.com/stacklok/toolhive/pkg/versions.Version={{.VERSION}} -X github.com/stacklok/toolhive/pkg/versions.Commit={{.COMMIT}} -X github.com/stacklok/toolhive/pkg/versions.BuildDate={{.BUILD_DATE}}" -v ./cmd/thv-operator

  build-operator-image:
    desc: Build the operator image with ko
    cmds:
      - ko build --local -B ./cmd/thv-operator

  operator-install-crds:
    desc: Install CRDs into the K8s cluster
    cmds:
      - helm upgrade --install operator-crds deploy/charts/operator-crds --kubeconfig kconfig.yaml

  operator-uninstall-crds:
    desc: Uninstall CRDs from the K8s cluster
    cmds:
      - helm uninstall operator-crds --kubeconfig kconfig.yaml

  operator-deploy-latest:
    desc: Deploy latest built Operator image from Github to the K8s cluster
    cmds:
      - helm upgrade --install toolhive-operator deploy/charts/operator --namespace toolhive-system --create-namespace --kubeconfig kconfig.yaml

  operator-deploy-local:
    desc: Build the ToolHive runtime and Operator image locally and deploy it to the K8s cluster
    vars:
      OPERATOR_IMAGE:
        sh: KO_DOCKER_REPO=kind.local ko build --local -B ./cmd/thv-operator | tail -n 1
      TOOLHIVE_IMAGE:
        sh: KO_DOCKER_REPO=kind.local ko build --local -B ./cmd/thv | tail -n 1
    cmds:
      - echo "Loading toolhive operator image {{.OPERATOR_IMAGE}} into kind..."
      - kind load docker-image --name toolhive {{.OPERATOR_IMAGE}}
      - echo "Loading toolhive image {{.TOOLHIVE_IMAGE}} into kind..."
      - kind load docker-image --name toolhive {{.TOOLHIVE_IMAGE}}
      - |
        helm upgrade --install toolhive-operator deploy/charts/operator \
        --set operator.image={{.OPERATOR_IMAGE}} \
        --set operator.toolhiveRunnerImage={{.TOOLHIVE_IMAGE}} \
        --namespace toolhive-system \
        --create-namespace \
        --kubeconfig kconfig.yaml

  operator-undeploy:
    desc: Undeploy operator from the K8s cluster
    cmds:
      - helm uninstall toolhive-operator --kubeconfig kconfig.yaml --namespace toolhive-system

  # Kubebuilder tasks
  operator-generate:
    desc: Generate code containing DeepCopy, DeepCopyInto, and DeepCopyObject method implementations
    cmds:
      - mkdir -p bin
      - go install sigs.k8s.io/controller-tools/cmd/controller-gen@v0.17.3
      - $(go env GOPATH)/bin/controller-gen object:headerFile="hack/boilerplate.go.txt" paths="./cmd/thv-operator/..."

  operator-manifests:
    desc: Generate WebhookConfiguration, ClusterRole and CustomResourceDefinition objects
    cmds:
      - mkdir -p bin
      - go install sigs.k8s.io/controller-tools/cmd/controller-gen@v0.17.3
      - $(go env GOPATH)/bin/controller-gen crd webhook paths="./cmd/thv-operator/..." output:crd:artifacts:config=deploy/charts/operator-crds/templates
      - $(go env GOPATH)/bin/controller-gen rbac:roleName=toolhive-operator-manager-role paths="./cmd/thv-operator/..." output:rbac:artifacts:config=deploy/charts/operator/templates/clusterrole

  operator-test:
    desc: Run tests for the operator
    cmds:
      - go install sigs.k8s.io/controller-runtime/tools/setup-envtest@latest
      - KUBEBUILDER_ASSETS="$(shell setup-envtest use 1.28.0 -p path)" go test ./cmd/thv-operator/... -coverprofile cover.out

  operator-e2e-test:
    desc: Run E2E tests for the operator
    cmds:
      - chainsaw test --test-dir test/e2e/chainsaw/operator/setup
      - chainsaw test --test-dir test/e2e/chainsaw/operator/test-scenarios
      - chainsaw test --test-dir test/e2e/chainsaw/operator/cleanup

  crdref-install:
    desc: Install elastic/crd-ref-docs
    cmds:
      - go install github.com/elastic/crd-ref-docs@latest

  crdref-gen:
    desc: Generate CRD API docs via crd-ref-docs
    deps: [crdref-install]
    cmds:
      - crd-ref-docs --source-path=. --config={{ .CRDREF_CONFIG }} --renderer markdown --output-path {{ .DOCS_OUT }}
    sources:
      - 'config/crd/bases/**/*.yaml'
      - 'api/**/*.go'
    generates:
      - '{{ .DOCS_OUT }}'