// Code generated by MockGen. DO NOT EDIT.
// Source: provider.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_provider.go -package=mocks -source=provider.go Provider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	registry "github.com/stacklok/toolhive/pkg/registry"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// GetImageServer mocks base method.
func (m *MockProvider) GetImageServer(name string) (*registry.ImageMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageServer", name)
	ret0, _ := ret[0].(*registry.ImageMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageServer indicates an expected call of GetImageServer.
func (mr *MockProviderMockRecorder) GetImageServer(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageServer", reflect.TypeOf((*MockProvider)(nil).GetImageServer), name)
}

// GetRegistry mocks base method.
func (m *MockProvider) GetRegistry() (*registry.Registry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistry")
	ret0, _ := ret[0].(*registry.Registry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegistry indicates an expected call of GetRegistry.
func (mr *MockProviderMockRecorder) GetRegistry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistry", reflect.TypeOf((*MockProvider)(nil).GetRegistry))
}

// GetServer mocks base method.
func (m *MockProvider) GetServer(name string) (registry.ServerMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer", name)
	ret0, _ := ret[0].(registry.ServerMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServer indicates an expected call of GetServer.
func (mr *MockProviderMockRecorder) GetServer(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockProvider)(nil).GetServer), name)
}

// ListImageServers mocks base method.
func (m *MockProvider) ListImageServers() ([]*registry.ImageMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImageServers")
	ret0, _ := ret[0].([]*registry.ImageMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImageServers indicates an expected call of ListImageServers.
func (mr *MockProviderMockRecorder) ListImageServers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImageServers", reflect.TypeOf((*MockProvider)(nil).ListImageServers))
}

// ListServers mocks base method.
func (m *MockProvider) ListServers() ([]registry.ServerMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServers")
	ret0, _ := ret[0].([]registry.ServerMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServers indicates an expected call of ListServers.
func (mr *MockProviderMockRecorder) ListServers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServers", reflect.TypeOf((*MockProvider)(nil).ListServers))
}

// SearchImageServers mocks base method.
func (m *MockProvider) SearchImageServers(query string) ([]*registry.ImageMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchImageServers", query)
	ret0, _ := ret[0].([]*registry.ImageMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchImageServers indicates an expected call of SearchImageServers.
func (mr *MockProviderMockRecorder) SearchImageServers(query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchImageServers", reflect.TypeOf((*MockProvider)(nil).SearchImageServers), query)
}

// SearchServers mocks base method.
func (m *MockProvider) SearchServers(query string) ([]registry.ServerMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchServers", query)
	ret0, _ := ret[0].([]registry.ServerMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchServers indicates an expected call of SearchServers.
func (mr *MockProviderMockRecorder) SearchServers(query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchServers", reflect.TypeOf((*MockProvider)(nil).SearchServers), query)
}
