// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_service.go -package=mocks -source=service.go Service
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	service "github.com/stacklok/toolhive/cmd/thv-registry-api/internal/service"
	registry "github.com/stacklok/toolhive/pkg/registry"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CheckReadiness mocks base method.
func (m *MockService) CheckReadiness(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckReadiness", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckReadiness indicates an expected call of CheckReadiness.
func (mr *MockServiceMockRecorder) CheckReadiness(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckReadiness", reflect.TypeOf((*MockService)(nil).CheckReadiness), ctx)
}

// GetDeployedServer mocks base method.
func (m *MockService) GetDeployedServer(ctx context.Context, name string) ([]*service.DeployedServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployedServer", ctx, name)
	ret0, _ := ret[0].([]*service.DeployedServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployedServer indicates an expected call of GetDeployedServer.
func (mr *MockServiceMockRecorder) GetDeployedServer(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployedServer", reflect.TypeOf((*MockService)(nil).GetDeployedServer), ctx, name)
}

// GetRegistry mocks base method.
func (m *MockService) GetRegistry(ctx context.Context) (*registry.Registry, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistry", ctx)
	ret0, _ := ret[0].(*registry.Registry)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRegistry indicates an expected call of GetRegistry.
func (mr *MockServiceMockRecorder) GetRegistry(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistry", reflect.TypeOf((*MockService)(nil).GetRegistry), ctx)
}

// GetServer mocks base method.
func (m *MockService) GetServer(ctx context.Context, name string) (registry.ServerMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer", ctx, name)
	ret0, _ := ret[0].(registry.ServerMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServer indicates an expected call of GetServer.
func (mr *MockServiceMockRecorder) GetServer(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockService)(nil).GetServer), ctx, name)
}

// ListDeployedServers mocks base method.
func (m *MockService) ListDeployedServers(ctx context.Context) ([]*service.DeployedServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeployedServers", ctx)
	ret0, _ := ret[0].([]*service.DeployedServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeployedServers indicates an expected call of ListDeployedServers.
func (mr *MockServiceMockRecorder) ListDeployedServers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeployedServers", reflect.TypeOf((*MockService)(nil).ListDeployedServers), ctx)
}

// ListServers mocks base method.
func (m *MockService) ListServers(ctx context.Context) ([]registry.ServerMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServers", ctx)
	ret0, _ := ret[0].([]registry.ServerMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServers indicates an expected call of ListServers.
func (mr *MockServiceMockRecorder) ListServers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServers", reflect.TypeOf((*MockService)(nil).ListServers), ctx)
}
