// Code generated by MockGen. DO NOT EDIT.
// Source: provider.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_provider.go -package=mocks -source=provider.go RegistryDataProvider,DeploymentProvider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	service "github.com/stacklok/toolhive/cmd/thv-registry-api/internal/service"
	registry "github.com/stacklok/toolhive/pkg/registry"
	gomock "go.uber.org/mock/gomock"
)

// MockRegistryDataProvider is a mock of RegistryDataProvider interface.
type MockRegistryDataProvider struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryDataProviderMockRecorder
	isgomock struct{}
}

// MockRegistryDataProviderMockRecorder is the mock recorder for MockRegistryDataProvider.
type MockRegistryDataProviderMockRecorder struct {
	mock *MockRegistryDataProvider
}

// NewMockRegistryDataProvider creates a new mock instance.
func NewMockRegistryDataProvider(ctrl *gomock.Controller) *MockRegistryDataProvider {
	mock := &MockRegistryDataProvider{ctrl: ctrl}
	mock.recorder = &MockRegistryDataProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistryDataProvider) EXPECT() *MockRegistryDataProviderMockRecorder {
	return m.recorder
}

// GetRegistryData mocks base method.
func (m *MockRegistryDataProvider) GetRegistryData(ctx context.Context) (*registry.Registry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistryData", ctx)
	ret0, _ := ret[0].(*registry.Registry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegistryData indicates an expected call of GetRegistryData.
func (mr *MockRegistryDataProviderMockRecorder) GetRegistryData(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistryData", reflect.TypeOf((*MockRegistryDataProvider)(nil).GetRegistryData), ctx)
}

// GetRegistryName mocks base method.
func (m *MockRegistryDataProvider) GetRegistryName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistryName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRegistryName indicates an expected call of GetRegistryName.
func (mr *MockRegistryDataProviderMockRecorder) GetRegistryName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistryName", reflect.TypeOf((*MockRegistryDataProvider)(nil).GetRegistryName))
}

// GetSource mocks base method.
func (m *MockRegistryDataProvider) GetSource() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSource")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSource indicates an expected call of GetSource.
func (mr *MockRegistryDataProviderMockRecorder) GetSource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSource", reflect.TypeOf((*MockRegistryDataProvider)(nil).GetSource))
}

// MockDeploymentProvider is a mock of DeploymentProvider interface.
type MockDeploymentProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentProviderMockRecorder
	isgomock struct{}
}

// MockDeploymentProviderMockRecorder is the mock recorder for MockDeploymentProvider.
type MockDeploymentProviderMockRecorder struct {
	mock *MockDeploymentProvider
}

// NewMockDeploymentProvider creates a new mock instance.
func NewMockDeploymentProvider(ctrl *gomock.Controller) *MockDeploymentProvider {
	mock := &MockDeploymentProvider{ctrl: ctrl}
	mock.recorder = &MockDeploymentProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentProvider) EXPECT() *MockDeploymentProviderMockRecorder {
	return m.recorder
}

// GetDeployedServer mocks base method.
func (m *MockDeploymentProvider) GetDeployedServer(ctx context.Context, name string) ([]*service.DeployedServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployedServer", ctx, name)
	ret0, _ := ret[0].([]*service.DeployedServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployedServer indicates an expected call of GetDeployedServer.
func (mr *MockDeploymentProviderMockRecorder) GetDeployedServer(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployedServer", reflect.TypeOf((*MockDeploymentProvider)(nil).GetDeployedServer), ctx, name)
}

// ListDeployedServers mocks base method.
func (m *MockDeploymentProvider) ListDeployedServers(ctx context.Context) ([]*service.DeployedServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeployedServers", ctx)
	ret0, _ := ret[0].([]*service.DeployedServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeployedServers indicates an expected call of ListDeployedServers.
func (mr *MockDeploymentProviderMockRecorder) ListDeployedServers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeployedServers", reflect.TypeOf((*MockDeploymentProvider)(nil).ListDeployedServers), ctx)
}
