// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_collector.go -package=mocks -source=types.go Collector
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/stacklok/toolhive/cmd/thv-operator/api/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockCollector is a mock of Collector interface.
type MockCollector struct {
	ctrl     *gomock.Controller
	recorder *MockCollectorMockRecorder
	isgomock struct{}
}

// MockCollectorMockRecorder is the mock recorder for MockCollector.
type MockCollectorMockRecorder struct {
	mock *MockCollector
}

// NewMockCollector creates a new mock instance.
func NewMockCollector(ctrl *gomock.Controller) *MockCollector {
	mock := &MockCollector{ctrl: ctrl}
	mock.recorder = &MockCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollector) EXPECT() *MockCollectorMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockCollector) Apply(ctx context.Context, k8sClient client.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx, k8sClient)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockCollectorMockRecorder) Apply(ctx, k8sClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockCollector)(nil).Apply), ctx, k8sClient)
}

// SetAPIReadyCondition mocks base method.
func (m *MockCollector) SetAPIReadyCondition(reason, message string, status v1.ConditionStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAPIReadyCondition", reason, message, status)
}

// SetAPIReadyCondition indicates an expected call of SetAPIReadyCondition.
func (mr *MockCollectorMockRecorder) SetAPIReadyCondition(reason, message, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAPIReadyCondition", reflect.TypeOf((*MockCollector)(nil).SetAPIReadyCondition), reason, message, status)
}

// SetAPIStatus mocks base method.
func (m *MockCollector) SetAPIStatus(phase v1alpha1.APIPhase, message, endpoint string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAPIStatus", phase, message, endpoint)
}

// SetAPIStatus indicates an expected call of SetAPIStatus.
func (mr *MockCollectorMockRecorder) SetAPIStatus(phase, message, endpoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAPIStatus", reflect.TypeOf((*MockCollector)(nil).SetAPIStatus), phase, message, endpoint)
}

// SetMessage mocks base method.
func (m *MockCollector) SetMessage(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMessage", message)
}

// SetMessage indicates an expected call of SetMessage.
func (mr *MockCollectorMockRecorder) SetMessage(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMessage", reflect.TypeOf((*MockCollector)(nil).SetMessage), message)
}

// SetPhase mocks base method.
func (m *MockCollector) SetPhase(phase v1alpha1.MCPRegistryPhase) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPhase", phase)
}

// SetPhase indicates an expected call of SetPhase.
func (mr *MockCollectorMockRecorder) SetPhase(phase any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPhase", reflect.TypeOf((*MockCollector)(nil).SetPhase), phase)
}

// SetSyncStatus mocks base method.
func (m *MockCollector) SetSyncStatus(phase v1alpha1.SyncPhase, message string, attemptCount int, lastSyncTime *v1.Time, lastSyncHash string, serverCount int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSyncStatus", phase, message, attemptCount, lastSyncTime, lastSyncHash, serverCount)
}

// SetSyncStatus indicates an expected call of SetSyncStatus.
func (mr *MockCollectorMockRecorder) SetSyncStatus(phase, message, attemptCount, lastSyncTime, lastSyncHash, serverCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSyncStatus", reflect.TypeOf((*MockCollector)(nil).SetSyncStatus), phase, message, attemptCount, lastSyncTime, lastSyncHash, serverCount)
}
