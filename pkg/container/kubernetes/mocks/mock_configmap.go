// Code generated by MockGen. DO NOT EDIT.
// Source: configmap.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_configmap.go -package=mocks -source=configmap.go RunConfigMapReader
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRunConfigMapReader is a mock of RunConfigMapReader interface.
type MockRunConfigMapReader struct {
	ctrl     *gomock.Controller
	recorder *MockRunConfigMapReaderMockRecorder
	isgomock struct{}
}

// MockRunConfigMapReaderMockRecorder is the mock recorder for MockRunConfigMapReader.
type MockRunConfigMapReaderMockRecorder struct {
	mock *MockRunConfigMapReader
}

// NewMockRunConfigMapReader creates a new mock instance.
func NewMockRunConfigMapReader(ctrl *gomock.Controller) *MockRunConfigMapReader {
	mock := &MockRunConfigMapReader{ctrl: ctrl}
	mock.recorder = &MockRunConfigMapReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunConfigMapReader) EXPECT() *MockRunConfigMapReaderMockRecorder {
	return m.recorder
}

// GetRunConfigMap mocks base method.
func (m *MockRunConfigMapReader) GetRunConfigMap(ctx context.Context, configMapRef string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunConfigMap", ctx, configMapRef)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunConfigMap indicates an expected call of GetRunConfigMap.
func (mr *MockRunConfigMapReaderMockRecorder) GetRunConfigMap(ctx, configMapRef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunConfigMap", reflect.TypeOf((*MockRunConfigMapReader)(nil).GetRunConfigMap), ctx, configMapRef)
}
