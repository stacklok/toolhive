// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_manager.go -package=mocks -source=types.go Manager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/stacklok/toolhive/cmd/thv-operator/api/v1alpha1"
	mcpregistrystatus "github.com/stacklok/toolhive/cmd/thv-operator/pkg/mcpregistrystatus"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/apps/v1"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// CheckAPIReadiness mocks base method.
func (m *MockManager) CheckAPIReadiness(ctx context.Context, deployment *v1.Deployment) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAPIReadiness", ctx, deployment)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckAPIReadiness indicates an expected call of CheckAPIReadiness.
func (mr *MockManagerMockRecorder) CheckAPIReadiness(ctx, deployment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAPIReadiness", reflect.TypeOf((*MockManager)(nil).CheckAPIReadiness), ctx, deployment)
}

// IsAPIReady mocks base method.
func (m *MockManager) IsAPIReady(ctx context.Context, mcpRegistry *v1alpha1.MCPRegistry) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAPIReady", ctx, mcpRegistry)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAPIReady indicates an expected call of IsAPIReady.
func (mr *MockManagerMockRecorder) IsAPIReady(ctx, mcpRegistry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAPIReady", reflect.TypeOf((*MockManager)(nil).IsAPIReady), ctx, mcpRegistry)
}

// ReconcileAPIService mocks base method.
func (m *MockManager) ReconcileAPIService(ctx context.Context, mcpRegistry *v1alpha1.MCPRegistry, statusCollector mcpregistrystatus.Collector) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileAPIService", ctx, mcpRegistry, statusCollector)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileAPIService indicates an expected call of ReconcileAPIService.
func (mr *MockManagerMockRecorder) ReconcileAPIService(ctx, mcpRegistry, statusCollector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileAPIService", reflect.TypeOf((*MockManager)(nil).ReconcileAPIService), ctx, mcpRegistry, statusCollector)
}
