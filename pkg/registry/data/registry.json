{
  "$schema": "https://raw.githubusercontent.com/stacklok/toolhive/main/docs/registry/schema.json",
  "last_updated": "2025-07-27T00:25:40Z",
  "servers": {
    "atlassian": {
      "args": [],
      "description": "Connect to Atlassian products like Confluence, Jira Cloud and Server/Data deployments.",
      "env_vars": [
        {
          "description": "Confluence URL (e.g., https://your-domain.atlassian.net/wiki)",
          "name": "CONFLUENCE_URL",
          "required": false
        },
        {
          "description": "Confluence username/email for Cloud deployments",
          "name": "CONFLUENCE_USERNAME",
          "required": false
        },
        {
          "description": "Confluence API token for Cloud deployments",
          "name": "CONFLUENCE_API_TOKEN",
          "required": false,
          "secret": true
        },
        {
          "description": "Confluence Personal Access Token for Server/Data Center deployments",
          "name": "CONFLUENCE_PERSONAL_TOKEN",
          "required": false,
          "secret": true
        },
        {
          "description": "Verify SSL certificates for Confluence Server/Data Center (true/false)",
          "name": "CONFLUENCE_SSL_VERIFY",
          "required": false
        },
        {
          "description": "Comma-separated list of Confluence space keys to filter search results",
          "name": "CONFLUENCE_SPACES_FILTER",
          "required": false
        },
        {
          "description": "Jira URL (e.g., https://your-domain.atlassian.net)",
          "name": "JIRA_URL",
          "required": false
        },
        {
          "description": "Jira username/email for Cloud deployments",
          "name": "JIRA_USERNAME",
          "required": false
        },
        {
          "description": "Jira API token for Cloud deployments",
          "name": "JIRA_API_TOKEN",
          "required": false,
          "secret": true
        },
        {
          "description": "Jira Personal Access Token for Server/Data Center deployments",
          "name": "JIRA_PERSONAL_TOKEN",
          "required": false,
          "secret": true
        },
        {
          "description": "Verify SSL certificates for Jira Server/Data Center (true/false)",
          "name": "JIRA_SSL_VERIFY",
          "required": false
        },
        {
          "description": "Comma-separated list of Jira project keys to filter search results",
          "name": "JIRA_PROJECTS_FILTER",
          "required": false
        },
        {
          "description": "Run in read-only mode (disables all write operations)",
          "name": "READ_ONLY_MODE",
          "required": false
        },
        {
          "description": "Increase logging verbosity",
          "name": "MCP_VERBOSE",
          "required": false
        },
        {
          "description": "Comma-separated list of tool names to enable (if not set, all tools are enabled)",
          "name": "ENABLED_TOOLS",
          "required": false
        }
      ],
      "image": "ghcr.io/sooperset/mcp-atlassian:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:33Z",
        "pulls": 10759,
        "stars": 2574
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [
              ".atlassian.net",
              ".atlassian.com"
            ],
            "allow_port": [
              443
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/sooperset/mcp-atlassian",
      "status": "Active",
      "tags": [
        "atlassian",
        "confluence",
        "jira",
        "wiki",
        "issue-tracking",
        "project-management",
        "documentation",
        "cloud",
        "server",
        "data-center"
      ],
      "tier": "Community",
      "tools": [
        "confluence_search",
        "confluence_get_page",
        "confluence_get_page_children",
        "confluence_get_comments",
        "confluence_get_labels",
        "confluence_add_label",
        "confluence_create_page",
        "confluence_update_page",
        "confluence_delete_page",
        "confluence_add_comment",
        "confluence_search_user",
        "jira_get_user_profile",
        "jira_get_issue",
        "jira_search",
        "jira_search_fields",
        "jira_get_project_issues",
        "jira_get_transitions",
        "jira_get_worklog",
        "jira_download_attachments",
        "jira_get_agile_boards",
        "jira_get_board_issues",
        "jira_get_sprints_from_board",
        "jira_get_sprint_issues",
        "jira_get_link_types",
        "jira_create_issue",
        "jira_batch_create_issues",
        "jira_batch_get_changelogs",
        "jira_update_issue",
        "jira_delete_issue",
        "jira_add_comment",
        "jira_add_worklog",
        "jira_link_to_epic",
        "jira_create_issue_link",
        "jira_remove_issue_link",
        "jira_transition_issue",
        "jira_create_sprint",
        "jira_update_sprint",
        "jira_get_project_versions",
        "jira_get_all_projects",
        "jira_create_version",
        "jira_batch_create_versions"
      ],
      "transport": "stdio"
    },
    "aws-cost-analysis": {
      "args": [],
      "description": "Generate upfront AWS service cost estimates and cost insights. This server is deprecated, use aws-pricing instead.",
      "env_vars": [
        {
          "description": "AWS access key ID with access to the AWS Pricing API",
          "name": "AWS_ACCESS_KEY_ID",
          "required": false,
          "secret": true
        },
        {
          "description": "AWS secret access key",
          "name": "AWS_SECRET_ACCESS_KEY",
          "required": false,
          "secret": true
        },
        {
          "description": "AWS sesison token for temporary credentials",
          "name": "AWS_SESSION_TOKEN",
          "required": false,
          "secret": true
        },
        {
          "default": "us-east-1",
          "description": "AWS region for the Pricing API endpoint (us-east-1, eu-central-1, ap-southeast-1)",
          "name": "AWS_REGION",
          "required": false
        },
        {
          "default": "ERROR",
          "description": "Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)",
          "name": "FASTMCP_LOG_LEVEL",
          "required": false
        }
      ],
      "image": "public.ecr.aws/f3y8w4n0/awslabs/cost-analysis-mcp-server:1.0.4",
      "metadata": {
        "last_updated": "2025-07-27T00:25:40Z",
        "pulls": 6883,
        "stars": 4986
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [
              "aws.amazon.com",
              "pricing.us-east-1.amazonaws.com",
              "api.pricing.us-east-1.amazonaws.com",
              "api.pricing.eu-central-1.amazonaws.com",
              "api.pricing.ap-southeast-1.amazonaws.com"
            ],
            "allow_port": [
              443
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/awslabs/mcp",
      "status": "Deprecated",
      "tags": [
        "aws",
        "cost-analysis",
        "pricing",
        "estimates",
        "cost-insights",
        "aws-costs",
        "aws-pricing"
      ],
      "tier": "Official",
      "tools": [
        "analyze_cdk_project",
        "analyze_terraform_project",
        "get_pricing_from_web",
        "get_pricing_from_api",
        "get_bedrock_patterns",
        "generate_cost_report"
      ],
      "transport": "stdio"
    },
    "aws-diagram": {
      "args": [],
      "description": "Generate AWS diagrams, sequence diagrams, flow diagrams, and class diagrams using Python code.",
      "env_vars": [
        {
          "default": "ERROR",
          "description": "Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)",
          "name": "FASTMCP_LOG_LEVEL",
          "required": false
        }
      ],
      "image": "mcp/aws-diagram:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:38Z",
        "pulls": 6325,
        "stars": 4986
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/awslabs/mcp",
      "status": "Active",
      "tags": [
        "aws",
        "diagram",
        "sequence-diagram",
        "flow-diagram",
        "class-diagram",
        "python"
      ],
      "tier": "Official",
      "tools": [
        "generate_diagram",
        "get_diagram_examples",
        "list_icons"
      ],
      "transport": "stdio"
    },
    "aws-documentation": {
      "args": [],
      "description": "Access AWS documentation, search for content, and get recommendations.",
      "env_vars": [
        {
          "default": "aws",
          "description": "AWS documentation partition (aws, aws-cn)",
          "name": "AWS_DOCUMENTATION_PARTITION",
          "required": false
        },
        {
          "default": "ERROR",
          "description": "Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)",
          "name": "FASTMCP_LOG_LEVEL",
          "required": false
        }
      ],
      "image": "mcp/aws-documentation:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:38Z",
        "pulls": 8019,
        "stars": 4986
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [
              ".docs.aws.amazon.com",
              ".docs.amazonaws.cn"
            ],
            "allow_port": [
              443
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/awslabs/mcp",
      "status": "Active",
      "tags": [
        "aws",
        "content",
        "documentation",
        "knowledge-base"
      ],
      "tier": "Official",
      "tools": [
        "read_documentation",
        "recommend",
        "search_documentation"
      ],
      "transport": "stdio"
    },
    "aws-pricing": {
      "args": [],
      "description": "Generate upfront AWS service cost estimates and cost insights.",
      "env_vars": [
        {
          "description": "AWS access key ID with access to the AWS Pricing API",
          "name": "AWS_ACCESS_KEY_ID",
          "required": false,
          "secret": true
        },
        {
          "description": "AWS secret access key",
          "name": "AWS_SECRET_ACCESS_KEY",
          "required": false,
          "secret": true
        },
        {
          "description": "AWS sesison token for temporary credentials",
          "name": "AWS_SESSION_TOKEN",
          "required": false,
          "secret": true
        },
        {
          "default": "us-east-1",
          "description": "AWS region for the Pricing API endpoint (us-east-1, eu-central-1, ap-southeast-1)",
          "name": "AWS_REGION",
          "required": false
        },
        {
          "default": "ERROR",
          "description": "Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)",
          "name": "FASTMCP_LOG_LEVEL",
          "required": false
        }
      ],
      "image": "public.ecr.aws/f3y8w4n0/awslabs/aws-pricing-mcp-server:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:33Z",
        "pulls": 6773,
        "stars": 4986
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [
              "aws.amazon.com",
              "pricing.us-east-1.amazonaws.com",
              "api.pricing.us-east-1.amazonaws.com",
              "api.pricing.eu-central-1.amazonaws.com",
              "api.pricing.ap-southeast-1.amazonaws.com"
            ],
            "allow_port": [
              443
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/awslabs/mcp",
      "status": "Active",
      "tags": [
        "aws",
        "cost-analysis",
        "pricing",
        "estimates",
        "cost-insights",
        "aws-costs",
        "aws-pricing"
      ],
      "tier": "Official",
      "tools": [
        "analyze_cdk_project",
        "analyze_terraform_project",
        "get_pricing",
        "get_bedrock_patterns",
        "generate_cost_report",
        "get_pricing_service_codes",
        "get_pricing_service_attributes",
        "get_pricing_attribute_values",
        "get_price_list_urls"
      ],
      "transport": "stdio"
    },
    "buildkite": {
      "args": [
        "stdio"
      ],
      "description": "Connect your Buildkite data (pipelines, builds, jobs, tests) to AI tooling and editors.",
      "env_vars": [
        {
          "description": "Your Buildkite API access token",
          "name": "BUILDKITE_API_TOKEN",
          "required": true,
          "secret": true
        },
        {
          "description": "Token threshold for job logs. If exceeded, logs will be written to disk and returned by path (for local use only).",
          "name": "JOB_LOG_TOKEN_THRESHOLD",
          "required": false
        }
      ],
      "image": "ghcr.io/buildkite/buildkite-mcp-server:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:39Z",
        "pulls": 1391,
        "stars": 19
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [
              ".buildkite.com"
            ],
            "allow_port": [
              443
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/buildkite/buildkite-mcp-server",
      "status": "Active",
      "tags": [
        "buildkite",
        "continuous-integration",
        "continuous-delivery",
        "pipelines",
        "builds",
        "jobs",
        "devops",
        "testing"
      ],
      "tier": "Official",
      "tools": [
        "get_cluster",
        "list_clusters",
        "get_cluster_queue",
        "list_cluster_queues",
        "get_pipeline",
        "list_pipelines",
        "create_pipeline",
        "update_pipeline",
        "list_builds",
        "get_build",
        "create_build",
        "get_build_test_engine_runs",
        "get_jobs",
        "get_job_logs",
        "list_artifacts",
        "get_artifact",
        "list_annotations",
        "list_test_runs",
        "get_test_run",
        "get_failed_executions",
        "get_test",
        "access_token",
        "current_user",
        "user_token_organization"
      ],
      "transport": "stdio"
    },
    "elasticsearch": {
      "args": [
        "http"
      ],
      "description": "Connect to your Elasticsearch data.",
      "env_vars": [
        {
          "description": "Your Elasticsearch instance URL",
          "name": "ES_URL",
          "required": true
        },
        {
          "description": "Elasticsearch API key for authentication",
          "name": "ES_API_KEY",
          "required": false,
          "secret": true
        },
        {
          "description": "Elasticsearch username for basic authentication",
          "name": "ES_USERNAME",
          "required": false
        },
        {
          "description": "Elasticsearch password for basic authentication",
          "name": "ES_PASSWORD",
          "required": false,
          "secret": true
        },
        {
          "description": "Path to custom CA certificate for Elasticsearch SSL/TLS",
          "name": "ES_CA_CERT",
          "required": false
        },
        {
          "description": "Set to '1' or 'true' to skip SSL certificate verification",
          "name": "ES_SSL_SKIP_VERIFY",
          "required": false
        },
        {
          "description": "Path prefix for Elasticsearch instance exposed at a non-root path",
          "name": "ES_PATH_PREFIX",
          "required": false
        },
        {
          "description": "Server assumes Elasticsearch 9.x. Set to 8 target Elasticsearch 8.x",
          "name": "ES_VERSION",
          "required": false
        }
      ],
      "image": "mcp/elasticsearch:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:36Z",
        "pulls": 8696,
        "stars": 369
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443,
              9200
            ],
            "insecure_allow_all": true
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/elastic/mcp-server-elasticsearch",
      "status": "Active",
      "tags": [
        "elasticsearch",
        "search",
        "analytics",
        "data",
        "alerting",
        "observability",
        "metrics",
        "logs"
      ],
      "target_port": 8080,
      "tier": "Official",
      "tools": [
        "esql",
        "get_mappings",
        "get_shards",
        "list_indices",
        "search"
      ],
      "transport": "streamable-http"
    },
    "everything": {
      "args": [],
      "description": "This MCP server attempts to exercise all the features of the MCP protocol",
      "env_vars": [],
      "image": "mcp/everything:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:37Z",
        "pulls": 14302,
        "stars": 61562
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "status": "Active",
      "tags": [
        "adds",
        "all",
        "attempts",
        "demonstrates",
        "everything",
        "exercise",
        "features",
        "returns",
        "simple",
        "tools"
      ],
      "tier": "Community",
      "tools": [
        "echo",
        "add",
        "longRunningOperation",
        "sampleLLM",
        "getTinyImage",
        "printEnv",
        "annotatedMessage"
      ],
      "transport": "stdio"
    },
    "fetch": {
      "args": [],
      "description": "Allows you to fetch content from the web",
      "env_vars": [],
      "image": "ghcr.io/stackloklabs/gofetch/server:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:40Z",
        "pulls": 11022,
        "stars": 13
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443
            ],
            "insecure_allow_all": true
          }
        },
        "read": [],
        "write": []
      },
      "provenance": {
        "cert_issuer": "https://token.actions.githubusercontent.com",
        "repository_uri": "https://github.com/StacklokLabs/gofetch",
        "runner_environment": "github-hosted",
        "signer_identity": "/.github/workflows/release.yml",
        "sigstore_url": "tuf-repo-cdn.sigstore.dev"
      },
      "repository_url": "https://github.com/stackloklabs/gofetch",
      "status": "Active",
      "tags": [
        "content",
        "html",
        "markdown",
        "fetch",
        "fetching",
        "get",
        "wget",
        "json",
        "curl",
        "modelcontextprotocol"
      ],
      "tier": "Community",
      "tools": [
        "fetch"
      ],
      "transport": "streamable-http"
    },
    "filesystem": {
      "args": [
        "/projects"
      ],
      "description": "Allows you to do filesystem operations. Mount paths under /projects using --volume.",
      "env_vars": [],
      "image": "mcp/filesystem:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:35Z",
        "pulls": 17902,
        "stars": 61562
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "status": "Active",
      "tags": [
        "create_directory",
        "edit_file",
        "filesystem",
        "get_file_info",
        "implementing",
        "list_allowed_directories",
        "list_directory",
        "move_file",
        "node",
        "operations"
      ],
      "tier": "Community",
      "tools": [
        "read_file",
        "read_multiple_files",
        "write_file",
        "edit_file",
        "create_directory",
        "list_directory",
        "directory_tree",
        "move_file",
        "search_files",
        "get_file_info",
        "list_allowed_directories"
      ],
      "transport": "stdio"
    },
    "firecrawl": {
      "args": [],
      "description": "A powerful web scraping and content extraction MCP server that provides advanced crawling, search, and structured data extraction capabilities with LLM integration.",
      "env_vars": [
        {
          "description": "API key for FireCrawl service authentication",
          "name": "FIRECRAWL_API_KEY",
          "required": true,
          "secret": true
        },
        {
          "description": "FireCrawl API URL (default: https://api.firecrawl.dev/v1)",
          "name": "FIRECRAWL_API_URL",
          "required": false
        },
        {
          "description": "Maximum number of retry attempts for API calls",
          "name": "FIRECRAWL_RETRY_MAX_ATTEMPTS",
          "required": false
        },
        {
          "description": "Initial delay in milliseconds for retry backoff",
          "name": "FIRECRAWL_RETRY_INITIAL_DELAY",
          "required": false
        },
        {
          "description": "Maximum delay in milliseconds for retry backoff",
          "name": "FIRECRAWL_RETRY_MAX_DELAY",
          "required": false
        },
        {
          "description": "Backoff factor for retry delay calculation",
          "name": "FIRECRAWL_RETRY_BACKOFF_FACTOR",
          "required": false
        },
        {
          "description": "Credit threshold for warning notifications",
          "name": "FIRECRAWL_CREDIT_WARNING_THRESHOLD",
          "required": false
        },
        {
          "description": "Credit threshold for critical notifications",
          "name": "FIRECRAWL_CREDIT_CRITICAL_THRESHOLD",
          "required": false
        }
      ],
      "image": "mcp/firecrawl:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:35Z",
        "pulls": 10573,
        "stars": 3937
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [
              "api.firecrawl.dev"
            ],
            "allow_port": [
              443
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/mendableai/firecrawl-mcp-server",
      "status": "Active",
      "tags": [
        "web-crawler",
        "web-scraping",
        "data-collection",
        "batch-processing",
        "content-extraction",
        "search-api",
        "llm-tools",
        "javascript-rendering",
        "research",
        "automation"
      ],
      "tier": "Official",
      "tools": [
        "firecrawl_scrape",
        "firecrawl_batch_scrape",
        "firecrawl_check_batch_status",
        "firecrawl_check_crawl_status",
        "firecrawl_search",
        "firecrawl_crawl",
        "firecrawl_extract",
        "firecrawl_deep_research",
        "firecrawl_generate_llmstxt",
        "firecrawl_map"
      ],
      "transport": "stdio"
    },
    "genai-toolbox": {
      "args": [],
      "description": "A comprehensive MCP server for database operations that provides tools for connecting to and interacting with various database systems with advanced features like connection pooling, authentication, and observability. Mount and configured via tools.yaml",
      "env_vars": [],
      "image": "us-central1-docker.pkg.dev/database-toolbox/toolbox/toolbox:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:34Z",
        "pulls": 774,
        "stars": 7920
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [],
            "insecure_allow_all": true
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/googleapis/genai-toolbox",
      "status": "Active",
      "tags": [
        "database",
        "sql",
        "postgresql",
        "mysql",
        "sqlite",
        "mongodb",
        "redis",
        "connection-pooling",
        "authentication",
        "observability",
        "toolbox",
        "genai",
        "mcp-server"
      ],
      "tier": "Official",
      "tools": [
        "set_during_runtime"
      ],
      "transport": "sse"
    },
    "git": {
      "args": [],
      "description": "Provides support for interacting with Git repositories",
      "env_vars": [],
      "image": "mcp/git:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:40Z",
        "pulls": 8998,
        "stars": 61562
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "status": "Active",
      "tags": [
        "adds",
        "automation",
        "git",
        "interaction",
        "records",
        "repository",
        "shows",
        "tools",
        "unstages"
      ],
      "tier": "Community",
      "tools": [
        "git_status",
        "git_diff_unstaged",
        "git_diff_staged",
        "git_diff",
        "git_commit",
        "git_add",
        "git_reset",
        "git_log",
        "git_create_branch",
        "git_checkout",
        "git_show",
        "git_init"
      ],
      "transport": "stdio"
    },
    "github": {
      "args": [],
      "description": "Provides integration with GitHub's APIs",
      "env_vars": [
        {
          "description": "GitHub personal access token with appropriate permissions",
          "name": "GITHUB_PERSONAL_ACCESS_TOKEN",
          "required": true,
          "secret": true
        },
        {
          "description": "GitHub Enterprise Server hostname (optional)",
          "name": "GH_HOST",
          "required": false
        }
      ],
      "image": "ghcr.io/github/github-mcp-server:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:36Z",
        "pulls": 5000,
        "stars": 19241
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [
              ".github.com",
              ".githubusercontent.com"
            ],
            "allow_port": [
              443
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "provenance": {
        "cert_issuer": "https://token.actions.githubusercontent.com",
        "repository_uri": "https://github.com/github/github-mcp-server",
        "runner_environment": "github-hosted",
        "signer_identity": "/.github/workflows/docker-publish.yml",
        "sigstore_url": "tuf-repo-cdn.sigstore.dev"
      },
      "repository_url": "https://github.com/github/github-mcp-server",
      "status": "Active",
      "tags": [
        "api",
        "create",
        "fork",
        "github",
        "list",
        "pull-request",
        "push",
        "repository",
        "search",
        "update",
        "issues"
      ],
      "tier": "Official",
      "tools": [
        "add_comment_to_pending_review",
        "add_issue_comment",
        "add_sub_issue",
        "assign_copilot_to_issue",
        "cancel_workflow_run",
        "create_and_submit_pull_request_review",
        "create_branch",
        "create_issue",
        "create_or_update_file",
        "create_pending_pull_request_review",
        "create_pull_request",
        "create_repository",
        "delete_file",
        "delete_pending_pull_request_review",
        "delete_workflow_run_logs",
        "dismiss_notification",
        "download_workflow_run_artifact",
        "fork_repository",
        "get_code_scanning_alert",
        "get_commit",
        "get_dependabot_alert",
        "get_discussion",
        "get_discussion_comment",
        "get_file_contents",
        "get_issue",
        "get_issue_comments",
        "get_job_logs",
        "get_me",
        "get_notification_details",
        "get_pull_request",
        "get_pull_request_comments",
        "get_pull_request_diff",
        "get_pull_request_files",
        "get_pull_request_reviews",
        "get_pull_request_status",
        "get_secret_scanning_alert",
        "get_tag",
        "get_workflow_run",
        "get_workflow_run_logs",
        "get_workflow_run_usage",
        "list_branches",
        "list_code_scanning_alerts",
        "list_commits",
        "list_dependabot_alerts",
        "list_discussion_categories",
        "list_discussions",
        "list_issues",
        "list_notifications",
        "list_pull_requests",
        "list_secret_scanning_alerts",
        "list_sub_issues",
        "list_tags",
        "list_workflow_jobs",
        "list_workflow_run_artifacts",
        "list_workflow_runs",
        "list_workflows",
        "manage_notification_subscription",
        "manage_repository_notification_subscription",
        "mark_all_notifications_read",
        "merge_pull_request",
        "push_files",
        "remove_sub_issue",
        "reprioritize_sub_issue",
        "request_copilot_review",
        "rerun_failed_jobs",
        "rerun_workflow_run",
        "run_workflow",
        "search_code",
        "search_issues",
        "search_orgs",
        "search_pull_requests",
        "search_repositories",
        "search_users",
        "submit_pending_pull_request_review",
        "update_issue",
        "update_pull_request",
        "update_pull_request_branch"
      ],
      "transport": "stdio"
    },
    "grafana": {
      "args": [],
      "description": "Provides access to your Grafana instance and the surrounding ecosystem, enabling dashboard search, datasource queries, alerting management, incident response, and Sift investigations.",
      "env_vars": [
        {
          "description": "URL of the Grafana instance to connect to",
          "name": "GRAFANA_URL",
          "required": true
        },
        {
          "description": "Service account token with appropriate permissions",
          "name": "GRAFANA_API_KEY",
          "required": true,
          "secret": true
        }
      ],
      "image": "mcp/grafana:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:34Z",
        "pulls": 6790,
        "stars": 1272
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443
            ],
            "insecure_allow_all": true
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/grafana/mcp-grafana",
      "status": "Active",
      "tags": [
        "grafana",
        "dashboards",
        "visualization",
        "monitoring",
        "alerting",
        "prometheus",
        "loki",
        "tempo",
        "pyroscope",
        "incidents",
        "observability",
        "metrics",
        "logs",
        "traces",
        "sift",
        "investigations",
        "oncall"
      ],
      "target_port": 8000,
      "tier": "Official",
      "tools": [
        "list_teams",
        "search_dashboards",
        "get_dashboard_by_uid",
        "update_dashboard",
        "get_dashboard_panel_queries",
        "list_datasources",
        "get_datasource_by_uid",
        "get_datasource_by_name",
        "query_prometheus",
        "list_prometheus_metric_metadata",
        "list_prometheus_metric_names",
        "list_prometheus_label_names",
        "list_prometheus_label_values",
        "list_incidents",
        "create_incident",
        "add_activity_to_incident",
        "resolve_incident",
        "query_loki_logs",
        "list_loki_label_names",
        "list_loki_label_values",
        "query_loki_stats",
        "list_alert_rules",
        "get_alert_rule_by_uid",
        "list_oncall_schedules",
        "get_oncall_shift",
        "get_current_oncall_users",
        "list_oncall_teams",
        "list_oncall_users",
        "get_investigation",
        "get_analysis",
        "list_investigations",
        "find_error_pattern_logs",
        "find_slow_requests",
        "list_pyroscope_label_names",
        "list_pyroscope_label_values",
        "list_pyroscope_profile_types",
        "fetch_pyroscope_profile"
      ],
      "transport": "sse"
    },
    "hass-mcp": {
      "args": [],
      "description": "Integrates Home Assistant with LLM applications, enabling direct interaction with smart home devices, sensors, and automations.",
      "env_vars": [
        {
          "description": "Home Assistant instance URL (e.g. http://homeassistant.local:8123)",
          "name": "HA_URL",
          "required": true
        },
        {
          "description": "Home Assistant Long-Lived Access Token",
          "name": "HA_TOKEN",
          "required": true,
          "secret": true
        }
      ],
      "image": "voska/hass-mcp:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:38Z",
        "pulls": 14308,
        "stars": 134
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [],
            "insecure_allow_all": true
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/voska/hass-mcp",
      "status": "Active",
      "tags": [
        "home-assistant",
        "smart-home",
        "automation",
        "iot",
        "sensors",
        "devices",
        "control",
        "monitoring",
        "home-automation",
        "domotics"
      ],
      "tier": "Community",
      "tools": [
        "get_version",
        "get_entity",
        "entity_action",
        "list_entities",
        "search_entities_tool",
        "domain_summary_tool",
        "list_automations",
        "call_service_tool",
        "restart_ha",
        "get_history",
        "get_error_log"
      ],
      "transport": "stdio"
    },
    "k8s": {
      "args": [],
      "description": "Allows LLM-powered applications to interact with Kubernetes clusters.",
      "env_vars": [
        {
          "description": "Path to the kubeconfig file for Kubernetes API authentication (mounted into the container with --volume)",
          "name": "KUBECONFIG",
          "required": false
        }
      ],
      "image": "ghcr.io/stackloklabs/mkp/server:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:36Z",
        "pulls": 11520,
        "stars": 42
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443
            ],
            "insecure_allow_all": true
          }
        },
        "read": [],
        "write": []
      },
      "provenance": {
        "cert_issuer": "https://token.actions.githubusercontent.com",
        "repository_uri": "https://github.com/StacklokLabs/mkp",
        "runner_environment": "github-hosted",
        "signer_identity": "/.github/workflows/release.yml",
        "sigstore_url": "tuf-repo-cdn.sigstore.dev"
      },
      "repository_url": "https://github.com/StacklokLabs/mkp",
      "status": "Active",
      "tags": [
        "kubernetes",
        "k8s",
        "api",
        "resources",
        "cluster",
        "namespaced",
        "apply",
        "get",
        "list"
      ],
      "tier": "Community",
      "tools": [
        "list_resources",
        "get_resource",
        "apply_resource"
      ],
      "transport": "sse"
    },
    "kyverno": {
      "args": [],
      "description": "Provides Kyverno policy management capabilities enabling AI assistants to interact with Kyverno policies in Kubernetes clusters for comprehensive policy management, security assessment, and compliance monitoring.",
      "env_vars": [
        {
          "description": "Path to the kubeconfig file for Kubernetes API authentication (mounted into the container with --volume)",
          "name": "KUBECONFIG",
          "required": false
        }
      ],
      "image": "ghcr.io/nirmata/kyverno-mcp:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:35Z",
        "pulls": 2438,
        "stars": 4
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443
            ],
            "insecure_allow_all": true
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/nirmata/kyverno-mcp",
      "status": "Active",
      "tags": [
        "kyverno",
        "kubernetes",
        "policy-management",
        "security",
        "compliance",
        "governance",
        "policy-as-code",
        "nirmata",
        "admission-control",
        "validation",
        "mutation",
        "generation",
        "policy-violations",
        "security-assessment",
        "rbac",
        "pod-security",
        "best-practices"
      ],
      "tier": "Official",
      "tools": [
        "list_contexts",
        "switch_context",
        "apply_policies",
        "show_violations",
        "help"
      ],
      "transport": "stdio"
    },
    "memory": {
      "args": [],
      "description": "Provides persistent memory to an LLMs application for storing information about the user across chats. Implemented using a local knowledge graph.",
      "env_vars": [
        {
          "description": "Path to the memory storage JSON file (default: memory.json in the server directory)",
          "name": "MEMORY_FILE_PATH",
          "required": false
        }
      ],
      "image": "mcp/memory:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:34Z",
        "pulls": 13669,
        "stars": 61562
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "status": "Active",
      "tags": [
        "entities",
        "graph",
        "knowledge",
        "memory",
        "observations",
        "persistent",
        "relations"
      ],
      "tier": "Community",
      "tools": [
        "create_entities",
        "create_relations",
        "add_observations",
        "delete_entities",
        "delete_observations",
        "delete_relations",
        "read_graph",
        "search_nodes",
        "open_nodes"
      ],
      "transport": "stdio"
    },
    "mongodb": {
      "args": [],
      "description": "Provides support for interacting with MongoDB Databases and MongoDB Atlas.",
      "env_vars": [
        {
          "description": "MongoDB connection string for direct database connections (optional, if not set, you'll need to call the connect tool before interacting with MongoDB data)",
          "name": "MDB_MCP_CONNECTION_STRING",
          "required": false,
          "secret": true
        },
        {
          "description": "Atlas API client ID for authentication (required for running Atlas tools)",
          "name": "MDB_MCP_API_CLIENT_ID",
          "required": false,
          "secret": true
        },
        {
          "description": "Atlas API client secret for authentication (required for running Atlas tools)",
          "name": "MDB_MCP_API_CLIENT_SECRET",
          "required": false,
          "secret": true
        },
        {
          "description": "Atlas API base URL (default is https://cloud.mongodb.com/)",
          "name": "MDB_MCP_API_BASE_URL",
          "required": false
        },
        {
          "description": "MongoDB server address for direct connections (optional, used for connect tool)",
          "name": "MDB_MCP_SERVER_ADDRESS",
          "required": false
        },
        {
          "description": "MongoDB server port for direct connections (optional, used for connect tool)",
          "name": "MDB_MCP_SERVER_PORT",
          "required": false
        },
        {
          "description": "Folder to store logs (inside the container)",
          "name": "MDB_MCP_LOG_PATH",
          "required": false
        },
        {
          "description": "Comma-separated list of tool names, operation types, and/or categories of tools to disable",
          "name": "MDB_MCP_DISABLED_TOOLS",
          "required": false
        },
        {
          "description": "When set to true, only allows read and metadata operation types",
          "name": "MDB_MCP_READ_ONLY",
          "required": false
        },
        {
          "description": "When set to disabled, disables telemetry collection",
          "name": "MDB_MCP_TELEMETRY",
          "required": false
        }
      ],
      "image": "mongodb/mongodb-mcp-server:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:34Z",
        "pulls": 3312,
        "stars": 438
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443,
              27017,
              27018,
              27019,
              27020
            ],
            "insecure_allow_all": true
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/mongodb-js/mongodb-mcp-server",
      "status": "Active",
      "tags": [
        "mongodb",
        "mongo",
        "atlas",
        "database",
        "data",
        "query"
      ],
      "tier": "Official",
      "tools": [
        "atlas-list-orgs",
        "atlas-list-projects",
        "atlas-create-project",
        "atlas-list-clusters",
        "atlas-inspect-cluster",
        "atlas-create-free-cluster",
        "atlas-connect-cluster",
        "atlas-inspect-access-list",
        "atlas-create-access-list",
        "atlas-list-db-users",
        "atlas-create-db-user",
        "atlas-list-alerts",
        "connect",
        "find",
        "aggregate",
        "count",
        "insert-one",
        "insert-many",
        "create-index",
        "update-one",
        "update-many",
        "rename-collection",
        "delete-one",
        "delete-many",
        "drop-collection",
        "drop-database",
        "list-databases",
        "list-collections",
        "collection-indexes",
        "collection-schema",
        "collection-storage-size",
        "db-stats"
      ],
      "transport": "stdio"
    },
    "netbird": {
      "args": [
        "--transport",
        "sse",
        "--sse-address",
        ":8001"
      ],
      "description": "Enables management of an NetBird network.",
      "env_vars": [
        {
          "description": "NetBird API token for authentication",
          "name": "NETBIRD_API_TOKEN",
          "required": true,
          "secret": true
        },
        {
          "description": "NetBird API host (default is api.netbird.io)",
          "name": "NETBIRD_HOST",
          "required": false
        }
      ],
      "image": "aantti/mcp-netbird:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:38Z",
        "pulls": 9118,
        "stars": 37
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [
              "api.netbird.io"
            ],
            "allow_port": [
              443
            ],
            "insecure_allow_all": true
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/aantti/mcp-netbird",
      "status": "Active",
      "tags": [
        "netbird",
        "vpn",
        "networking",
        "peer",
        "route",
        "dns",
        "setup-key",
        "management"
      ],
      "target_port": 8001,
      "tier": "Community",
      "tools": [
        "list_netbird_peers",
        "list_netbird_port_allocations",
        "list_netbird_groups",
        "list_netbird_policies",
        "list_netbird_posture_checks",
        "list_netbird_networks",
        "list_netbird_nameservers"
      ],
      "transport": "sse"
    },
    "notion": {
      "args": [],
      "description": "Provides integration with Notion.",
      "env_vars": [
        {
          "description": "HTTP headers for Notion API requests in JSON format. Example: {\"Authorization\":\"Bearer ntn_****\",\"Notion-Version\":\"2022-06-28\"}",
          "name": "OPENAPI_MCP_HEADERS",
          "required": true,
          "secret": true
        }
      ],
      "image": "mcp/notion:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:37Z",
        "pulls": 4160,
        "stars": 2782
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [
              "api.notion.com"
            ],
            "allow_port": [
              443
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/makenotion/notion-mcp-server",
      "status": "Active",
      "tags": [
        "notion",
        "notes"
      ],
      "tier": "Official",
      "tools": [
        "API-get-user",
        "API-get-users",
        "API-get-self",
        "API-post-database-query",
        "API-post-search",
        "API-get-block-children",
        "API-patch-block-children",
        "API-retrieve-a-block",
        "API-update-a-block",
        "API-delete-a-block",
        "API-retrieve-a-page",
        "API-patch-page",
        "API-post-page",
        "API-create-a-database",
        "API-update-a-database",
        "API-retrieve-a-database",
        "API-retrieve-a-page-property",
        "API-retrieve-a-comment",
        "API-create-a-comment"
      ],
      "transport": "stdio"
    },
    "oci-registry": {
      "args": [],
      "description": "Enables secure and seamless querying of OCI container registries, providing tools for image introspection, tag discovery, and manifest/config retrieval.",
      "env_vars": [
        {
          "description": "Bearer token for OCI registry authentication",
          "name": "OCI_TOKEN",
          "required": false,
          "secret": true
        },
        {
          "description": "Username for registry authentication",
          "name": "OCI_USERNAME",
          "required": false
        },
        {
          "description": "Password for registry authentication",
          "name": "OCI_PASSWORD",
          "required": false,
          "secret": true
        }
      ],
      "image": "ghcr.io/stackloklabs/ocireg-mcp/server:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:38Z",
        "pulls": 6148,
        "stars": 9
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443
            ],
            "insecure_allow_all": true
          }
        },
        "read": [],
        "write": []
      },
      "provenance": {
        "cert_issuer": "https://token.actions.githubusercontent.com",
        "repository_uri": "https://github.com/StacklokLabs/ocireg-mcp",
        "runner_environment": "github-hosted",
        "signer_identity": "/.github/workflows/release.yml",
        "sigstore_url": "tuf-repo-cdn.sigstore.dev"
      },
      "repository_url": "https://github.com/StacklokLabs/ocireg-mcp",
      "status": "Active",
      "tags": [
        "oci",
        "registry",
        "containers",
        "images",
        "tags",
        "manifest",
        "config",
        "mcp",
        "docker"
      ],
      "tier": "Community",
      "tools": [
        "get_image_info",
        "list_tags",
        "get_image_manifest",
        "get_image_config"
      ],
      "transport": "sse"
    },
    "osv": {
      "args": [],
      "description": "Provides access to the OSV (Open Source Vulnerabilities) database. Allows LLM-powered applications to query the OSV database for vulnerability information about packages and commits.",
      "env_vars": [],
      "image": "ghcr.io/stackloklabs/osv-mcp/server:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:34Z",
        "pulls": 8532,
        "stars": 14
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [
              "api.osv.dev"
            ],
            "allow_port": [
              443
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "provenance": {
        "cert_issuer": "https://token.actions.githubusercontent.com",
        "repository_uri": "https://github.com/StacklokLabs/osv-mcp",
        "runner_environment": "github-hosted",
        "signer_identity": "/.github/workflows/release.yml",
        "sigstore_url": "tuf-repo-cdn.sigstore.dev"
      },
      "repository_url": "https://github.com/StacklokLabs/osv-mcp",
      "status": "Active",
      "tags": [
        "vulnerability",
        "security",
        "osv",
        "open-source",
        "cve",
        "packages",
        "dependencies",
        "scanning",
        "security-scanning",
        "vulnerability-detection"
      ],
      "tier": "Community",
      "tools": [
        "query_vulnerability",
        "query_vulnerabilities_batch",
        "get_vulnerability"
      ],
      "transport": "sse"
    },
    "perplexity-ask": {
      "args": [],
      "description": "Integrates Perplexity AI's Sonar API for live web searches, in-depth research, and reasoning tasks.",
      "env_vars": [
        {
          "description": "Perplexity API key",
          "name": "PERPLEXITY_API_KEY",
          "required": true,
          "secret": true
        }
      ],
      "image": "mcp/perplexity-ask:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:37Z",
        "pulls": 12832,
        "stars": 1440
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [
              "api.perplexity.ai"
            ],
            "allow_port": [
              443
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/ppl-ai/modelcontextprotocol",
      "status": "Active",
      "tags": [
        "ask",
        "perplexity",
        "perplexity-ask"
      ],
      "tier": "Official",
      "tools": [
        "perplexity_ask",
        "perplexity_research",
        "perplexity_reason"
      ],
      "transport": "stdio"
    },
    "playwright": {
      "args": [
        "--port",
        "8931"
      ],
      "description": "Provides browser automation capabilities using Playwright",
      "env_vars": [],
      "image": "mcr.microsoft.com/playwright/mcp",
      "metadata": {
        "last_updated": "2025-07-27T00:25:39Z",
        "pulls": 20791,
        "stars": 15574
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443
            ],
            "insecure_allow_all": true
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/microsoft/playwright-mcp",
      "status": "Active",
      "tags": [
        "playwright",
        "automation",
        "browser",
        "navigate"
      ],
      "target_port": 8931,
      "tier": "Official",
      "tools": [
        "browser_close",
        "browser_resize",
        "browser_console_messages",
        "browser_handle_dialog",
        "browser_file_upload",
        "browser_install",
        "browser_press_key",
        "browser_navigate",
        "browser_navigate_back",
        "browser_navigate_forward",
        "browser_network_requests",
        "browser_pdf_save",
        "browser_take_screenshot",
        "browser_snapshot",
        "browser_click",
        "browser_drag",
        "browser_hover",
        "browser_type",
        "browser_select_option",
        "browser_tab_list",
        "browser_tab_new",
        "browser_tab_select",
        "browser_tab_close",
        "browser_generate_playwright_test",
        "browser_wait_for"
      ],
      "transport": "sse"
    },
    "redis": {
      "args": [],
      "description": "Enables LLMs to interact with Redis key-value databases through a set of standardized tools.",
      "env_vars": [
        {
          "description": "Redis IP or hostname (default \"127.0.0.1\")",
          "name": "REDIS_HOST",
          "required": true
        },
        {
          "description": "Redis port (default 6379)",
          "name": "REDIS_PORT",
          "required": false
        },
        {
          "description": "Redis database number (default 0)",
          "name": "REDIS_DB",
          "required": false
        },
        {
          "description": "Redis username (default \"default\")",
          "name": "REDIS_USERNAME",
          "required": false
        },
        {
          "description": "Redis password (default empty)",
          "name": "REDIS_PWD",
          "required": false,
          "secret": true
        },
        {
          "description": "Redis TLS connection (True|False, default False)",
          "name": "REDIS_SSL",
          "required": false
        },
        {
          "description": "CA certificate for verifying server",
          "name": "REDIS_CA_PATH",
          "required": false
        },
        {
          "description": "Client's private key file for client authentication",
          "name": "REDIS_SSL_KEYFILE",
          "required": false
        },
        {
          "description": "Client's certificate file for client authentication",
          "name": "REDIS_SSL_CERTFILE",
          "required": false
        },
        {
          "description": "Whether the client should verify the server's certificate (default \"required\")",
          "name": "REDIS_CERT_REQS",
          "required": false
        },
        {
          "description": "Path to the trusted CA certificates file",
          "name": "REDIS_CA_CERTS",
          "required": false
        },
        {
          "description": "Enable Redis Cluster mode (True|False, default False)",
          "name": "REDIS_CLUSTER_MODE",
          "required": false
        },
        {
          "description": "Use the stdio or sse transport (default stdio)",
          "name": "MCP_TRANSPORT",
          "required": false
        }
      ],
      "image": "mcp/redis:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:37Z",
        "pulls": 8751,
        "stars": 166
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443,
              6379
            ],
            "insecure_allow_all": true
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/redis/mcp-redis",
      "status": "Active",
      "tags": [
        "redis",
        "database",
        "key-value",
        "storage",
        "cache",
        "data"
      ],
      "tier": "Official",
      "tools": [
        "dbsize",
        "info",
        "client_list",
        "delete",
        "type",
        "expire",
        "rename",
        "scan_keys",
        "scan_all_keys",
        "get_indexes",
        "get_index_info",
        "get_indexed_keys_number",
        "create_vector_index_hash",
        "vector_search_hash",
        "hset",
        "hget",
        "hdel",
        "hgetall",
        "hexists",
        "set_vector_in_hash",
        "get_vector_from_hash",
        "lpush",
        "rpush",
        "lpop",
        "rpop",
        "lrange",
        "llen",
        "set",
        "get",
        "json_set",
        "json_get",
        "json_del",
        "zadd",
        "zrange",
        "zrem",
        "sadd",
        "srem",
        "smembers",
        "xadd",
        "xrange",
        "xdel",
        "publish",
        "subscribe",
        "unsubscribe"
      ],
      "transport": "stdio"
    },
    "semgrep": {
      "args": [
        "--transport",
        "sse"
      ],
      "description": "Allows you to scan code for security vulnerabilities using Semgrep, a fast, deterministic static analysis tool that semantically understands many languages and comes with over 5,000 rules.",
      "env_vars": [
        {
          "description": "Token for connecting to Semgrep AppSec Platform",
          "name": "SEMGREP_APP_TOKEN",
          "required": false,
          "secret": true
        }
      ],
      "image": "ghcr.io/semgrep/mcp:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:33Z",
        "pulls": 10185,
        "stars": 305
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [
              "semgrep.dev"
            ],
            "allow_port": [
              443
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/semgrep/mcp",
      "status": "Active",
      "tags": [
        "security",
        "static-analysis",
        "code-scanning",
        "vulnerability-detection",
        "sast",
        "code-quality",
        "security-scanning",
        "semgrep",
        "ast",
        "code-analysis"
      ],
      "tier": "Official",
      "tools": [
        "security_check",
        "semgrep_scan",
        "semgrep_scan_with_custom_rule",
        "get_abstract_syntax_tree",
        "supported_languages",
        "semgrep_rule_schema",
        "write_custom_semgrep_rule"
      ],
      "transport": "sse"
    },
    "sequentialthinking": {
      "args": [],
      "description": "Enables dynamic problem-solving with a structured, reflective approach that can adapt and evolve as understanding deepens.",
      "env_vars": [],
      "image": "mcp/sequentialthinking:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:35Z",
        "pulls": 13052,
        "stars": 61562
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "status": "Active",
      "tags": [
        "approach",
        "dynamic",
        "enabling",
        "problem",
        "reflective",
        "sequentialthinking",
        "solving",
        "structured",
        "step-by-step",
        "revision",
        "branching",
        "chain-of-thought"
      ],
      "tier": "Community",
      "tools": [
        "sequentialthinking"
      ],
      "transport": "stdio"
    },
    "sqlite": {
      "args": [],
      "description": "Provides tools and resources for querying SQLite databases.",
      "env_vars": [],
      "image": "ghcr.io/stackloklabs/sqlite-mcp/server:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:36Z",
        "pulls": 2160,
        "stars": 8
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/StacklokLabs/sqlite-mcp",
      "status": "Active",
      "tags": [
        "data",
        "database",
        "query",
        "sql",
        "sqlite"
      ],
      "tier": "Community",
      "tools": [
        "execute_query",
        "execute_statement",
        "list_tables",
        "describe_table"
      ],
      "transport": "sse"
    },
    "terraform": {
      "args": [],
      "description": "Provides integration with the Terraform ecosystem and interaction capabilities for Infrastructure as Code (IaC) development.",
      "env_vars": [],
      "image": "hashicorp/terraform-mcp-server:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:40Z",
        "pulls": 7168,
        "stars": 763
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [
              "registry.terraform.io"
            ],
            "allow_port": [
              443
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/hashicorp/terraform-mcp-server",
      "status": "Active",
      "tags": [
        "terraform",
        "iac",
        "infrastructure",
        "automation",
        "providers",
        "modules",
        "hcl",
        "plan",
        "apply",
        "destroy",
        "aws",
        "gcp",
        "azure"
      ],
      "tier": "Official",
      "tools": [
        "resolveProviderDocID",
        "getProviderDocs",
        "searchModules",
        "moduleDetails"
      ],
      "transport": "stdio"
    },
    "time": {
      "args": [],
      "description": "Provides time information and IANA timezone conversions with auto system timezone detection.",
      "env_vars": [],
      "image": "mcp/time:latest",
      "metadata": {
        "last_updated": "2025-07-27T00:25:37Z",
        "pulls": 9447,
        "stars": 61562
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "status": "Active",
      "tags": [
        "auto",
        "available",
        "configuration",
        "conversions",
        "convert_time",
        "customization",
        "details",
        "detection",
        "example",
        "examples"
      ],
      "tier": "Community",
      "tools": [
        "get_current_time",
        "convert_time"
      ],
      "transport": "stdio"
    }
  },
  "version": "1.0.0"
}