// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/secrets/types.go
//
// Generated by this command:
//
//	mockgen -source=pkg/secrets/types.go -destination=pkg/secrets/mocks/mock_provider.go -package=mocks Provider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	secrets "github.com/stacklok/toolhive/pkg/secrets"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Capabilities mocks base method.
func (m *MockProvider) Capabilities() secrets.ProviderCapabilities {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capabilities")
	ret0, _ := ret[0].(secrets.ProviderCapabilities)
	return ret0
}

// Capabilities indicates an expected call of Capabilities.
func (mr *MockProviderMockRecorder) Capabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capabilities", reflect.TypeOf((*MockProvider)(nil).Capabilities))
}

// Cleanup mocks base method.
func (m *MockProvider) Cleanup() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cleanup")
	ret0, _ := ret[0].(error)
	return ret0
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockProviderMockRecorder) Cleanup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockProvider)(nil).Cleanup))
}

// DeleteSecret mocks base method.
func (m *MockProvider) DeleteSecret(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockProviderMockRecorder) DeleteSecret(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockProvider)(nil).DeleteSecret), ctx, name)
}

// GetSecret mocks base method.
func (m *MockProvider) GetSecret(ctx context.Context, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", ctx, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockProviderMockRecorder) GetSecret(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockProvider)(nil).GetSecret), ctx, name)
}

// ListSecrets mocks base method.
func (m *MockProvider) ListSecrets(ctx context.Context) ([]secrets.SecretDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecrets", ctx)
	ret0, _ := ret[0].([]secrets.SecretDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecrets indicates an expected call of ListSecrets.
func (mr *MockProviderMockRecorder) ListSecrets(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockProvider)(nil).ListSecrets), ctx)
}

// SetSecret mocks base method.
func (m *MockProvider) SetSecret(ctx context.Context, name, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSecret", ctx, name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSecret indicates an expected call of SetSecret.
func (mr *MockProviderMockRecorder) SetSecret(ctx, name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSecret", reflect.TypeOf((*MockProvider)(nil).SetSecret), ctx, name, value)
}
